from telegram.ext import Application, CommandHandler, MessageHandler, filters
from telegram import Update
from telegram.ext import CallbackContext
import random
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler
import logging
logging.basicConfig(level=logging.ERROR)  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—à–µ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
import asyncio




#–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º
async def start(update, context):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ –î—É—Ä–∞–∫–∞. –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –∏–≥—Ä–∞—Ç—å.")

async def help_command(update, context):
    await update.message.reply_text("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –Ω–∞–ø–∏—à–∏ /play. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∞–≤–∏–ª –Ω–∞–ø–∏—à–∏ /rules.")

async def play(update, context):
    await join_game(update, context)
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    pass

async def rules(update, context):
    rules_text = """
    –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ –î—É—Ä–∞–∫–∞:
    ...
    """
    await update.message.reply_text(rules_text)

# –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –∏–≥—Ä–∞—Ç—å
players = {}

#–ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
suits = ["spades", "clubs", "diamonds", "hearts"]
ranks_36 = ["6", "7", "8", "9", "10", "jack", "queen", "king", "ace"]
ranks_52 = ["2", "3", "4", "5"] + ranks_36

suit_to_emoji = {
    "diamonds": "‚ô¶Ô∏è",
    "spades": "‚ô†Ô∏è",
    "hearts": "‚ô•Ô∏è",
    "clubs": "‚ô£Ô∏è"
}

rank_to_emoji = {
    "ace": "üÖ∞Ô∏è",
    "2": "2Ô∏è‚É£",
    "3": "3Ô∏è‚É£",
    "4": "4Ô∏è‚É£",
    "5": "5Ô∏è‚É£",
    "6": "6Ô∏è‚É£",
    "7": "7Ô∏è‚É£",
    "8": "8Ô∏è‚É£",
    "9": "9Ô∏è‚É£",
    "10": "üîü",
    "jack": "üëÆüèª",
    "queen": "üë∏üèª",
    "king": "ü§¥üèª"
}


#–∏–≥—Ä–æ–≤–∞—è –∫–æ–ª–æ–¥–∞
def create_deck(deck_type="36", number_of_decks=1):
    if deck_type == "36":
        base_deck = [{"suit": suit, "rank": rank} for suit in suits for rank in ranks_36]
    elif deck_type == "52":
        base_deck = [{"suit": suit, "rank": rank} for suit in suits for rank in ranks_52]
    else:
        raise ValueError("Invalid deck type. Choose either '36' or '52'.")
    
    return base_deck * number_of_decks

# –ü–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∞ –∫–æ–ª–æ–¥—ã
def shuffle_deck(deck):
    random.shuffle(deck)
    return deck

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–∑—ã—Ä—è
def determine_trump(deck):
    trump_card = deck[-1]
    return trump_card['suit']

# –†–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞–º
def deal_cards(players, deck):
    for player in players:
        player['hand'] = []

        # –†–∞–∑–¥–∞–µ–º –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É –ø–æ 6 –∫–∞—Ä—Ç
        for _ in range(6):
            card = deck.pop()
            player['hand'].append(card)

    return players, deck

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–∑—ã—Ä–µ–º
def determine_first_player(players_list, trump_suit):
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –Ω–∞–∏–º–µ–Ω—å—à–µ–º—É –∫–æ–∑—ã—Ä—é –≤ –∏—Ö —Ä—É–∫–µ
    players_list.sort(key=lambda player: min([rank_to_emoji[card['rank']] for card in player['hand'] if card['suit'] == trump_suit], default="ü§¥üèª"))
    return players_list


# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞–º
async def send_cards_to_players(players_list, context: CallbackContext):
    for player in players_list:
        hand_emoji = " ".join([suit_to_emoji[card['suit']] + rank_to_emoji[card['rank']] for card in player['hand']])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–Ω—é —Å –∫–∞—Ä—Ç–∞–º–∏
        cards_menu = generate_cards_menu(player['hand'])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
        actions_menu = generate_actions_menu(player['status'])
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–≤–∞ –º–µ–Ω—é –≤ –æ–¥–Ω–æ
        combined_menu = cards_menu.inline_keyboard + actions_menu.inline_keyboard
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º –º–µ–Ω—é
        await context.bot.send_message(chat_id=player['id'], text=f"–¢–≤–æ–∏ –∫–∞—Ä—Ç—ã: {hand_emoji}", reply_markup=InlineKeyboardMarkup(combined_menu))



#–ú–µ–Ω—é –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞
def generate_cards_menu(player_hand):
    keyboard = []
    row = []
    for card in player_hand:
        card_emoji = suit_to_emoji[card['suit']] + rank_to_emoji[card['rank']]
        button = InlineKeyboardButton(card_emoji, callback_data=f"card_{card['suit']}-{card['rank']}")
        row.append(button)
        if len(row) == 4:  # –ü–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 6 –∫–∞—Ä—Ç –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä—è–¥
            keyboard.append(row)
            row = []
    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ä—Ç—ã, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ 6
        keyboard.append(row)
    return InlineKeyboardMarkup(keyboard)



#–ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —É –∏–≥—Ä–æ–∫–∞
def generate_actions_menu(player_status):
    if player_status == "Attacking":
        buttons = [
            InlineKeyboardButton("–ü–æ—Ö–æ–¥–∏—Ç—å", callback_data="action_attack")
        ]
    elif player_status == "Defending":
        buttons = [
            InlineKeyboardButton("–û—Ç–±–∏—Ç—å—Å—è", callback_data="action_defend"),
            InlineKeyboardButton("–í–∑—è—Ç—å", callback_data="action_take"),
            InlineKeyboardButton("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏", callback_data="action_transfer")
        ]
    else:  # Idle
        buttons = [
            InlineKeyboardButton("–ü–æ–¥–∫–∏–Ω—É—Ç—å", callback_data="action_throw_in")
        ]
    
    keyboard = [buttons]  # –¢–µ–ø–µ—Ä—å –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    return InlineKeyboardMarkup(keyboard)




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —Å—Ç–æ–ª–∞
def generate_game_table(chat_id, deck, trump_suit, table_cards):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–∞
    current_order = players[chat_id]
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–æ–¥–µ –∏ –∫–æ–∑—ã—Ä–µ
    cards_left = len(deck)
    trump_card = suit_to_emoji[trump_suit] + rank_to_emoji[deck[-1]['rank']]
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ä—è–¥–∫–µ —Ö–æ–¥–∞
    order_info = "\n".join([f"{player['name']} - üÉè{len(player['hand'])}" for player in current_order])
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Ö–æ–¥–µ
    current_player = current_order[0]['name']
    next_player = current_order[1]['name']
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ
    table = f"üÉè{cards_left} | –ö–æ–∑—ã—Ä—å: {trump_card} | –•–æ–¥: {current_player} ‚û°Ô∏è {next_player}\n\n"
    table += "–ü–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–∞:\n"
    table += order_info
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–∞—Ö –Ω–∞ —Å—Ç–æ–ª–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    # (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫–∏ —É–∂–µ –Ω–∞—á–∞–ª–∏ —Ö–æ–¥–∏—Ç—å)
    table += "\n\n–ù–∞ —Å—Ç–æ–ª–µ:\n"
    table += " ".join([f"{card['suit']}{card['rank']}" for card in table_cards])
    
    return table

#–í—ã–≤–æ–¥–∏–º –∏–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª
async def update_game_table_message(update: Update, context: CallbackContext, chat_id, deck, trump_suit, table_cards):
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª
    table_message = generate_game_table(chat_id, deck, trump_suit, table_cards)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–≤—ã–º —Å—Ç–æ–ª–æ–º
    # –ó–¥–µ—Å—å –º—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–≥—Ä–æ–≤—ã–º —Å—Ç–æ–ª–æ–º.
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫, –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–µ.
    if 'table_message_id' in context.user_data:
        await context.bot.edit_message_text(chat_id=chat_id, message_id=context.user_data['table_message_id'], text=table_message)
    else:
        sent_message = await update.message.reply_text(table_message)
        context.user_data['table_message_id'] = sent_message.message_id

async def process_turn(update: Update, context: CallbackContext, chat_id, deck, trump_suit, action=None):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–∞
    current_order = players[chat_id]
    table_cards = []
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª
    await update_game_table_message(update, context, chat_id, deck, trump_suit, table_cards)
    
    
    # –ü–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
    current_player = current_order.pop(0)
    current_order.append(current_player)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–∞
    players[chat_id] = current_order
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∏–≥—Ä–æ–≤—ã–º —Å—Ç–æ–ª–æ–º
    # (–∑–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–≥—Ä–æ–≤—ã–º —Å—Ç–æ–ª–æ–º)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞—É–Ω–¥–∞ –∏–ª–∏ –∏–≥—Ä—ã
    # (–∑–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞—É–Ω–¥–∞ –∏–ª–∏ –∏–≥—Ä—ã)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Ö–æ–¥–∞
def update_turn_order(players_order):
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
    current_player = players_order.pop(0)
    players_order.append(current_player)
    return players_order

#–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ
async def join_game(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    chat_id = update.message.chat_id

    if chat_id not in players:
        players[chat_id] = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ
    for player in players[chat_id]:
        if player['id'] == user.id:
            await update.message.reply_text(f"{user.first_name}, —Ç—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")
            return

    players[chat_id].append({
        'id': user.id,
        'name': user.first_name,
        'message': update.message,  # –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
        'status': 'Idle'  # –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å

    })

    await update.message.reply_text(f"{user.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!")

#–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
async def list_participants(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    if chat_id not in players or not players[chat_id]:
        await update.message.reply_text("–í –∏–≥—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return

    players_list = "\n".join([player['name'] for player in players[chat_id]])
    await update.message.reply_text(f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–≥—Ä—ã:\n{players_list}")

#–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
async def go(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id

    if chat_id not in players:
        await update.message.reply_text("–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å!")
        return

    if len(players[chat_id]) < 2:
        await update.message.reply_text("–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ –æ–¥–∏–Ω–æ—á–∫—É!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É, –ø–µ—Ä–µ—Ç–∞—Å–æ–≤—ã–≤–∞–µ–º –∏ —Ä–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
    deck = shuffle_deck(create_deck("36"))  # –∏–ª–∏ "52" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–ª–æ–¥—ã
    players[chat_id], deck = deal_cards(players[chat_id], deck)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–∑—ã—Ä—è
    trump_suit = determine_trump(deck)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–∑—ã—Ä–µ–º –∏ –ø–æ—Ä—è–¥–∫–∞ —Ö–æ–¥–∞
    players_order = determine_first_player(players[chat_id], trump_suit)
    random.shuffle(players_order[1:])  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
    players_order[0]['status'] = 'Attacking'
    players_order[1]['status'] = 'Defending'
    for player in players_order[2:]:
        player['status'] = 'Idle'
    #–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–æ–≤
    players[chat_id] = players_order
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞–º –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ —Ö–æ–¥–∞
    await send_cards_to_players(players[chat_id], context)
    await process_turn(update, context, chat_id, deck, trump_suit)

    # –ó–∞–ø—É—Å–∫ –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞
    start_round(players_order, deck)

def start_round(players_order, deck):
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç, –µ—Å–ª–∏ –Ω–∞ —Ä—É–∫–µ –º–µ–Ω—å—à–µ 6
    for player in players_order:
        while len(player['hand']) < 6 and deck:
            player['hand'].append(deck.pop())
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
    players_order[0]['status'] = 'Attacking'
    players_order[1]['status'] = 'Defending'
    for player in players_order[2:]:
        player['status'] = 'Idle'

#–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç
def check_cards_same_value(selected_cards):
    first_card_value = selected_cards[0]['rank']
    return all(card['rank'] == first_card_value for card in selected_cards)

async def handle_attack(update: Update, context: CallbackContext, chat_id, selected_cards, table_cards, deck, trump_suit):
    attacking_player = next(player for player in players[chat_id] if player['status'] == 'Attacking')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –µ—Å—Ç—å –Ω–∞ —Ä—É–∫–µ —É –∞—Ç–∞–∫—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏ –∏–º–µ—é—Ç –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
    if all(card in attacking_player['hand'] for card in selected_cards) and check_cards_same_value(selected_cards):
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–∞–∫—É
        for card in selected_cards:
            attacking_player['hand'].remove(card)
            table_cards.append(card)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª
        await update_game_table_message(update, context, chat_id, deck, trump_suit, table_cards)

        
        await update.message.reply_text(f"–ò–≥—Ä–æ–∫ {attacking_player['name']} –∞—Ç–∞–∫—É–µ—Ç –∫–∞—Ä—Ç–∞–º–∏ {selected_cards}")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞—Ç–∞–∫–æ–≤–∞—Ç—å —ç—Ç–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏.")





# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –∫–æ–Ω–µ—Ü —Ä–∞—É–Ω–¥–∞
def end_round(players_order, successful_defense):
    if successful_defense:
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∞—Ç–∞–∫—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
        players_order.append(players_order.pop(0))
    else:
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞—â–∏—â–∞—é—â–µ–≥–æ—Å—è –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
        players_order.append(players_order.pop(1))
    # ... (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤, –∏ —Ç.–¥.)



# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –∏–≥—Ä—ã
async def stop(update: Update, context: CallbackContext) -> None:
    players.clear()
    await update.message.reply_text("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")



async def callback_query_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    if query.data.startswith('card_'):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        current_keyboard = query.message.reply_markup.inline_keyboard

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∏–∑–º–µ–Ω—è—è —Ç–µ–∫—Å—Ç –Ω—É–∂–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        new_keyboard = []
        for row in current_keyboard:
            new_row = []
            for button in row:
                if button.callback_data == query.data:
                    new_text = toggle_card_selection(button.text)
                    new_button = InlineKeyboardButton(new_text, callback_data=button.callback_data)
                else:
                    new_button = button
                new_row.append(new_button)
            new_keyboard.append(new_row)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        reply_markup = InlineKeyboardMarkup(new_keyboard)
        await query.edit_message_reply_markup(reply_markup=reply_markup)

# –î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ —É–±–∏—Ä–∞–µ—Ç —ç–º–æ–¥–∑–∏ ‚úÖ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–∞—Ä—Ç—ã.
def toggle_card_selection(card_text):
    if card_text.startswith("‚úÖ"):
        print(f"Original card text: {card_text}")
        return card_text[2:]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ —É–∂–µ –≤—ã–¥–µ–ª–µ–Ω–∞
    else:
        print(f"Selecting card: {card_text}")  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        return f"‚úÖ {card_text}"  # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ –≤—ã–¥–µ–ª–µ–Ω–∞








# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

def main() -> None:
    application = Application.builder().token('6189771635:AAHEZ83SLCJ8VqBwF6aF3OtLcAHU7jcmwUc').build()

   
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('play', play))
    application.add_handler(CommandHandler('rules', rules))
    application.add_handler(CommandHandler('go', go))
    application.add_handler(CommandHandler('stop', stop))
    application.add_handler(CommandHandler('list', list_participants))   
    application.add_handler(CallbackQueryHandler(callback_query_handler))
    



    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    
    main()
