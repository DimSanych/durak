def check_cards_same_value(selected_cards):
    if not selected_cards:
        return False  # Возвращаем False, если список пуст
    
    first_card_rank = selected_cards[0]['rank']  # Получаем ранг первой карты
    
    for card in selected_cards:
        if card['rank'] != first_card_rank:
            return False  # Возвращаем False, если ранг какой-либо карты отличается от первой
    
    return True  # Возвращаем True, если все карты имеют одинаковый ранг

async def callback_query_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    query_data = query.data
    chat_id = query.message.chat_id

    if query.data.startswith('card_'):
        # Получаем текущую клавиатуру
        current_keyboard = query.message.reply_markup.inline_keyboard

        # Создаем новую клавиатуру, изменяя текст нужной кнопки
        new_keyboard = []
        selected_cards = []
        for row in current_keyboard:
            new_row = []
            for button in row:
                if button.callback_data == query.data:
                    new_text = toggle_card_selection(button.text)
                    new_button = InlineKeyboardButton(new_text, callback_data=button.callback_data)
                else:
                    new_button = button
                
                # Проверяем, содержит ли текст кнопки эмодзи "✅"
                if "✅" in new_button.text:
                    card_data = new_button.callback_data.split("_")[1]  # Получаем данные карты из callback_data
                    selected_cards.append(card_data)  # Добавляем карту в список выбранных

                new_row.append(new_button)
            new_keyboard.append(new_row)
        # Обновляем сообщение с новой клавиатурой
        reply_markup = InlineKeyboardMarkup(new_keyboard)
        await query.edit_message_reply_markup(reply_markup=reply_markup)
        
        # Сохраняем список выбранных карт в context.user_data
        context.user_data['selected_cards'] = selected_cards

    elif query_data == "action_attack":
    # Получаем выбранные карты из context.user_data
        selected_cards = context.user_data.get('selected_cards', [])
    
        # Преобразуем в словарь
        selected_cards = [{'suit': card_str.split('-')[0], 'rank': card_str.split('-')[1]} for card_str in selected_cards]
    
        # Проверяем, имеют ли все выбранные карты одинаковый ранг
        if not check_cards_same_value(selected_cards):
            await query.message.reply_text("Выберите карты одного значения.")
            return

        # Если все хорошо, отправляем подсказку пользователю
        await query.message.reply_text("Можно атаковать выбранными картами")

        group_chat_id = context.user_data.get('group_chat_id', None)


        # Получаем остальные необходимые данные
        table_cards = context.user_data.get('table_cards', [])
        deck = context.user_data.get('deck', [])
        trump_suit = context.user_data.get('trump_suit', None)
        # Вызываем функцию атаки
        await handle_attack(update, context, group_chat_id, selected_cards, table_cards, deck, trump_suit)

    elif query_data == "action_defend":
    # Получаем необходимые данные из context.user_data
        selected_cards = context.user_data.get('selected_cards', [])
        table_cards = context.user_data.get('table_cards', [])
        deck = context.user_data.get('deck', [])
        trump_suit = context.user_data.get('trump_suit', None)
        group_chat_id = query.message.chat_id  # или group_chat_id, если у вас есть такая переменная

        # Вызываем функцию отбивания
        await handle_defense(update, context, group_chat_id, selected_cards, table_cards, deck, trump_suit)



# Добавляет или убирает эмодзи ✅ из текста карты.
def toggle_card_selection(card_text):
    if card_text.startswith("✅"):
        print(f"Original card text: {card_text}")
        return card_text[2:]  # Убираем эмодзи, если карта уже выделена
    else:
        print(f"Selecting card: {card_text}")  # Добавлено для отладки
        return f"✅ {card_text}"  # Добавляем эмодзи, если карта не выделена


def check_defense_validity(defense_card, attack_cards, trump_suit):
    # Получаем масть и ранг карты, которой игрок хочет отбиться
    defense_suit = defense_card['suit']
    defense_rank = defense_card['rank']
    
    # Проверяем каждую атакующую карту
    for attack_card in attack_cards:
        attack_suit = attack_card['suit']
        attack_rank = attack_card['rank']
        
        # Если масть отбивающей карты совпадает с мастью атакующей карты
        if defense_suit == attack_suit:
            if rank_hierarchy[defense_rank] > rank_hierarchy[attack_rank]:
                return True
        
        # Если отбивающая карта является козырем
        elif defense_suit == trump_suit:
            return True
    
    return False

async def handle_defense(update: Update, context: CallbackContext, group_chat_id, selected_card, table_cards, deck, trump_suit):
    # Получаем текущие данные из context.user_data
    player_hand = context.user_data.get('player_hand', [])
    
    # Преобразуем выбранную карту в словарь
    selected_card = {'suit': selected_card.split('-')[0], 'rank': selected_card.split('-')[1]}
    
    # Проверяем, можно ли отбиться этой картой
    can_defend = check_defense_validity(selected_card, table_cards, trump_suit)
    
    if not can_defend:
        await update.callback_query.message.reply_text("Невозможно отбиться этой картой. Попробуйте другую.")
        return
    
    # Если отбивание возможно, добавляем карту на стол и удаляем ее из руки игрока
    table_cards.append(selected_card)
    player_hand.remove(selected_card)
    
    # Обновляем данные в context.user_data
    context.user_data['table_cards'] = table_cards
    context.user_data['player_hand'] = player_hand
    
    # Обновляем игровой стол
    await update_game_table_message(update, context, group_chat_id, deck, trump_suit, table_cards)
    
    # Отправляем сообщение о успешном отбивании
    await update.callback_query.message.reply_text("Отбивание успешно выполнено. Ход переходит к следующему игроку.")

def check_defense_validity(selected_card, table_cards, trump_suit):
    last_table_card = table_cards[-1]  # Последняя карта на столе
    if selected_card['suit'] == last_table_card['suit']:
        return rank_hierarchy[selected_card['rank']] > rank_hierarchy[last_table_card['rank']]
    elif selected_card['suit'] == trump_suit:
        return True
    else:
        return False






# Запуск бота

def main() -> None:
    application = Application.builder().token('6189771635:AAHEZ83SLCJ8VqBwF6aF3OtLcAHU7jcmwUc').build()

   
    # Обработчики команд
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('play', play))
    application.add_handler(CommandHandler('rules', rules))
    application.add_handler(CommandHandler('go', go))
    application.add_handler(CommandHandler('stop', stop))
    application.add_handler(CommandHandler('list', list_participants))   
    application.add_handler(CallbackQueryHandler(callback_query_handler))
    



    # Запускаем бота
    application.run_polling()

if __name__ == '__main__':
    
    main()