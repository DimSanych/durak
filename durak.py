from telegram.ext import Application, CommandHandler, MessageHandler, filters
from telegram import Update
from telegram.ext import CallbackContext
import random
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler
import logging
logging.basicConfig(level=logging.ERROR)  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—à–µ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
import asyncio




#–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º
async def start(update, context):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ –î—É—Ä–∞–∫–∞. –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –∏–≥—Ä–∞—Ç—å.")

async def help_command(update, context):
    await update.message.reply_text("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –Ω–∞–ø–∏—à–∏ /play. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∞–≤–∏–ª –Ω–∞–ø–∏—à–∏ /rules.")

async def play(update, context):
    await join_game(update, context)
    pass

async def rules(update, context):
    rules_text = """
    –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ –î—É—Ä–∞–∫–∞:
    ...
    """
    await update.message.reply_text(rules_text)

# –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –∏–≥—Ä–∞—Ç—å
players = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä
games_data = {}

def initialize_game(chat_id):
    # –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã
    game_data = {
    
            'chat_id': chat_id,
            'players': [],
            'deck': [],
            'trump_suit': None,
            'table_cards': [],
            'current_turn': None,
            'game_status': 'not_started'
        }
    return game_data   





# –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ–π –∏ —Ä–∞–Ω–≥–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–¥—ã –∫–∞—Ä—Ç.
suits = ["spades", "clubs", "diamonds", "hearts"]
ranks_36 = ["6", "7", "8", "9", "10", "jack", "queen", "king", "ace"]
ranks_52 = ["2", "3", "4", "5"] + ranks_36


suit_to_emoji = {
    "diamonds": "‚ô¶Ô∏è",
    "spades": "‚ô†Ô∏è",
    "hearts": "‚ô•Ô∏è",
    "clubs": "‚ô£Ô∏è"
}

rank_to_emoji = {
    "ace": "üÖ∞Ô∏è",
    "2": "2Ô∏è‚É£",
    "3": "3Ô∏è‚É£",
    "4": "4Ô∏è‚É£",
    "5": "5Ô∏è‚É£",
    "6": "6Ô∏è‚É£",
    "7": "7Ô∏è‚É£",
    "8": "8Ô∏è‚É£",
    "9": "9Ô∏è‚É£",
    "10": "üîü",
    "jack": "üëÆüèª",
    "queen": "üë∏üèª",
    "king": "ü§¥üèª"
}

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é —Ä–∞–Ω–≥–æ–≤ –¥–ª—è 52-–∫–∞—Ä—Ç–æ—á–Ω–æ–π –∫–æ–ª–æ–¥—ã
rank_hierarchy = {
    "2": 1,
    "3": 2,
    "4": 3,
    "5": 4,
    "6": 5,
    "7": 6,
    "8": 7,
    "9": 8,
    "10": 9,
    "jack": 10,
    "queen": 11,
    "king": 12,
    "ace": 13
}

# –î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ —É–±–∏—Ä–∞–µ—Ç —ç–º–æ–¥–∑–∏ ‚úÖ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–∞—Ä—Ç—ã.
def toggle_card_selection(card_text):
    if card_text.startswith("‚úÖ"):
        return card_text[2:]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ —É–∂–µ –≤—ã–¥–µ–ª–µ–Ω–∞
    else:
        return f"‚úÖ {card_text}"  # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ –≤—ã–¥–µ–ª–µ–Ω–∞

#–∏–≥—Ä–æ–≤–∞—è –∫–æ–ª–æ–¥–∞
def create_deck(deck_type="36", number_of_decks=1):
    if deck_type == "36":
        base_deck = [{"suit": suit, "rank": rank} for suit in suits for rank in ranks_36]
    elif deck_type == "52":
        base_deck = [{"suit": suit, "rank": rank} for suit in suits for rank in ranks_52]
    else:
        raise ValueError("Invalid deck type. Choose either '36' or '52'.")
    
    return base_deck * number_of_decks

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∏ –∫–æ–ª–æ–¥—ã
def shuffle_deck(deck):
    random.shuffle(deck)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é shuffle –∏–∑ –º–æ–¥—É–ª—è random –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∫–∏ –∫–æ–ª–æ–¥—ã
    return deck  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–æ–≤–∞–Ω–Ω—É—é –∫–æ–ª–æ–¥—É

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–∑—ã—Ä—è
def determine_trump(deck):
    trump_card = deck[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –∫–∞–∫ –∫–æ–∑—ã—Ä–Ω—É—é
    return trump_card['suit']  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Ç—å –∫–æ–∑—ã—Ä–Ω–æ–π –∫–∞—Ä—Ç—ã

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞–º
def deal_cards(players, deck):
    for player in players:  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
        player['hand'] = []  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞

        # –†–∞–∑–¥–∞–µ–º –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É –ø–æ 6 –∫–∞—Ä—Ç
        for _ in range(6):
            card = deck.pop()  # –ë–µ—Ä–µ–º –∫–∞—Ä—Ç—É –∏–∑ –≤–µ—Ä—Ö–∞ –∫–æ–ª–æ–¥—ã
            player['hand'].append(card)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ —Ä—É–∫—É –∏–≥—Ä–æ–∫–∞

    return players, deck  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏ –∫–æ–ª–æ–¥—É

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–∑—ã—Ä–µ–º
def determine_first_player(players_list, trump_suit):
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –Ω–∞–∏–º–µ–Ω—å—à–µ–º—É –∫–æ–∑—ã—Ä—é –≤ –∏—Ö —Ä—É–∫–µ
    players_list.sort(key=lambda player: min([rank_to_emoji[card['rank']] for card in player['hand'] if card['suit'] == trump_suit], default="ü§¥üèª"))
    return players_list # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞–º
async def send_cards_to_players(chat_id, context: CallbackContext) -> None:
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è games_data –ø–æ chat_id
    game_data = games_data[chat_id]
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–ø–∏—Å–∫—É –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ
    for player in game_data['players']:
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç—É –∏–≥—Ä–æ–∫–∞ –≤ —Å—Ç—Ä–æ–∫—É —Å —ç–º–æ–¥–∑–∏ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        hand_emoji = " ".join([suit_to_emoji[card['suit']] + rank_to_emoji[card['rank']] for card in player['hand']])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ä—Ç–∞–º–∏ –∏–≥—Ä–æ–∫–∞
        cards_menu = generate_cards_menu(player['hand'])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –∏–≥—Ä–æ–∫–∞
        actions_menu = generate_actions_menu(player['status'], game_data['table_cards'])
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –µ–≥–æ —Å –º–µ–Ω—é –∫–∞—Ä—Ç, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ–Ω—é –∫–∞—Ä—Ç
        if actions_menu:
            combined_menu = cards_menu.inline_keyboard + actions_menu.inline_keyboard
        else:
            combined_menu = cards_menu.inline_keyboard
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å—Ç–æ–ª–∞
        table_message = generate_game_table(game_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–≤—ã–º —Å—Ç–æ–ª–æ–º –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º –º–µ–Ω—é
        sent_message = await context.bot.send_message(chat_id=player['id'], text=table_message, reply_markup=InlineKeyboardMarkup(combined_menu))
        player['message_id'] = sent_message.message_id






# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞
def generate_cards_menu(player_hand):
    keyboard = []  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    row = []  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä—è–¥–∞ –∫–Ω–æ–ø–æ–∫
    for card in player_hand:  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–µ –≤ —Ä—É–∫–µ –∏–≥—Ä–æ–∫–∞
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Ä—Ç—É –≤ —ç–º–æ–¥–∑–∏
        card_emoji = suit_to_emoji[card['suit']] + rank_to_emoji[card['rank']]
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —ç–º–æ–¥–∑–∏ –∫–∞—Ä—Ç—ã
        button = InlineKeyboardButton(card_emoji, callback_data=f"card_{card['suit']}-{card['rank']}")
        row.append(button)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ä—è–¥
        if len(row) == 4:  # –ü–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 4 –∫–∞—Ä—Ç –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä—è–¥
            keyboard.append(row)
            row = []
    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞—Ä—Ç—ã, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ 4
        keyboard.append(row)
    return InlineKeyboardMarkup(keyboard)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏



#–ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —É –∏–≥—Ä–æ–∫–∞
def generate_actions_menu(player_status, table_cards=None):
    
    if player_status == "Attacking":
        buttons = [
            InlineKeyboardButton("–ê—Ç–∞–∫–æ–≤–∞—Ç—å", callback_data="action_attack")
        ]
    elif player_status == "Defending":
        
        if table_cards:
            print("–µ—Å—Ç—å –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞ —Å—Ç–æ–ª–µ –∫–∞—Ä—Ç—ã –∑–∞—â–∏—Ç—ã
            defend_cards_count = sum(1 for card in table_cards if card['type'] == 'defend')
            attack_cards_count = sum(1 for card in table_cards if card['type'] == 'attack')
            
            buttons = [
                InlineKeyboardButton("–û—Ç–±–∏—Ç—å—Å—è", callback_data="action_defend")
            ]
            
            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –∞—Ç–∞–∫–∏ –Ω–µ —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞—Ä—Ç –∑–∞—â–∏—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–∑—è—Ç—å"
            if attack_cards_count != defend_cards_count:
                buttons.append(InlineKeyboardButton("–í–∑—è—Ç—å", callback_data="action_take"))
            
            # –ï—Å–ª–∏ –Ω–∞ —Å—Ç–æ–ª–µ –Ω–µ—Ç –∫–∞—Ä—Ç –∑–∞—â–∏—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏"
            if defend_cards_count == 0:
                buttons.append(InlineKeyboardButton("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏", callback_data="action_transfer"))
        else:
            return None
    else:  # Idle
        if table_cards:
            buttons = [
                InlineKeyboardButton("–ü–æ–¥–∫–∏–Ω—É—Ç—å", callback_data="action_throw_in")
            ]
            # –ï—Å–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏ –ø–æ–±–∏—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ë–∏—Ç–æ"
            defend_cards_count = sum(1 for card in table_cards if card['type'] == 'defend')
            attack_cards_count = sum(1 for card in table_cards if card['type'] == 'attack')
            if attack_cards_count == defend_cards_count:
                buttons.append(InlineKeyboardButton("–ë–∏—Ç–æ", callback_data="action_done"))
        else:
            return None
    keyboard = [buttons]  # –¢–µ–ø–µ—Ä—å –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    return InlineKeyboardMarkup(keyboard)






# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —Å—Ç–æ–ª–∞
def generate_game_table(game_data):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–∞
    current_order = game_data['players']
    deck = game_data['deck']
    trump_suit = game_data['trump_suit']

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–æ–¥–µ –∏ –∫–æ–∑—ã—Ä–µ
    cards_left = len(deck)

    if deck:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç—ã –≤ –∫–æ–ª–æ–¥–µ
        trump_card = suit_to_emoji[trump_suit] + rank_to_emoji[deck[-1]['rank']]
    else:
        trump_card = suit_to_emoji[trump_suit]

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ä—è–¥–∫–µ —Ö–æ–¥–∞
    order_info = "\n".join([f"{player['name']} - üÉè{len(player['hand'])}" for player in current_order])

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Ö–æ–¥–µ
    current_player = current_order[0]['name']
    if len(current_order) > 1:
        next_player = current_order[1]['name']
    else:
        next_player = None
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ
    table = f"üÉè{cards_left} | –ö–æ–∑—ã—Ä—å: {trump_card} | –•–æ–¥: {current_player} ‚û°Ô∏è {next_player}\n\n"
    table += "–ü–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–∞:\n"
    table += order_info

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–∞—Ö –Ω–∞ —Å—Ç–æ–ª–µ
    table_cards = game_data['table_cards']
    table += "\n\n–ù–∞ —Å—Ç–æ–ª–µ:\n"

    # –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—Ä—Ç –∞—Ç–∞–∫–∏ –∏ –∑–∞—â–∏—Ç—ã –Ω–∞ –∏–≥—Ä–æ–≤–æ–º

    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –∫–∞—Ä—Ç –∞—Ç–∞–∫–∏
    attack_indices = [card['index'] for card in table_cards if card['type'] == 'attack']

    for index in attack_indices:
        attack_card = next(card for card in table_cards if card['type'] == 'attack' and card['index'] == index)
        defend_card = next((card for card in table_cards if card['type'] == 'defend' and card['index'] == index), None)
        
        attack_card_str = f"{suit_to_emoji[attack_card['card']['suit']]}{rank_to_emoji[attack_card['card']['rank']]}"
        table += f"\n{attack_card_str}"  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∞—Ç–∞–∫–∏
        
        if defend_card:
            defend_card_str = f"{suit_to_emoji[defend_card['card']['suit']]}{rank_to_emoji[defend_card['card']['rank']]}"
            table += f"  üõ°  {defend_card_str}"  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –∑–∞—â–∏—Ç—ã
    
    return table


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–≥—Ä–æ–≤—ã–º —Å—Ç–æ–ª–æ–º
async def update_game_table_message(chat_id, context: CallbackContext) -> None:

    game_data = games_data[chat_id]  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è games_data

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª
    table_message = generate_game_table(game_data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–≤—ã–º —Å—Ç–æ–ª–æ–º
    if 'table_message_id' in context.user_data:
        await context.bot.edit_message_text(chat_id=chat_id, message_id=context.user_data['table_message_id'], text=table_message)
    else:
        sent_message = await context.bot.send_message(chat_id=chat_id, text=table_message)
        context.user_data['table_message_id'] = sent_message.message_id
        return sent_message.message_id  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤

async def join_game(update: Update, context: CallbackContext) -> None:
    user = update.message.from_user
    chat_id = update.message.chat_id
    chat_type = update.message.chat.type

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –≥—Ä—É–ø–ø—ã –≤ context.user_data –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    context.user_data['group_chat_id'] = chat_id


    if chat_type not in ["group", "supergroup"]:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≥—Ä—É–ø–ø–µ")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    if chat_id not in games_data:
        games_data[chat_id] = initialize_game(chat_id)
    game = games_data[chat_id]

    # –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å, –Ω–æ–≤—ã–µ –∏–≥—Ä–æ–∫–∏ –Ω–µ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
    if game['game_status'] == 'started':
        await update.message.reply_text("–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å–µ–π—á–∞—Å.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ
    for player in game['players']:
        if player['id'] == user.id:
            await update.message.reply_text(f"{user.first_name}, —Ç—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")
            return

    game['players'].append({
        'id': user.id,
        'name': user.first_name,
        'hand': [],
        'status': 'Idle'
    })

    await update.message.reply_text(f"{user.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!")








# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
async def list_participants(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id  # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ (–≥—Ä—É–ø–ø—ã)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è games_data
    game = games_data.get(chat_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∏–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –µ—Å—Ç—å –ª–∏ –∏–≥—Ä–æ–∫–∏
    if not game or not game['players']:
        await update.message.reply_text("–í –∏–≥—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return

    players_list = "\n".join([player['name'] for player in game['players']])  # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∏–≥—Ä–æ–∫–æ–≤
    await update.message.reply_text(f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–≥—Ä—ã:\n{players_list}")



# –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
async def go(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id  # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ (–≥—Ä—É–ø–ø—ã)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è games_data
    game = games_data.get(chat_id)

    # –ï—Å–ª–∏ –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–µ
    if not game:
        game = initialize_game(chat_id)
        games_data[chat_id] = game

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞ —Ä–∞–Ω–µ–µ
    if game['game_status'] == 'started':
        await update.message.reply_text("–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    if len(game['players']) < 2:
        await update.message.reply_text("–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ –æ–¥–∏–Ω–æ—á–∫—É!")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–¥—É, –ø–µ—Ä–µ—Ç–∞—Å–æ–≤—ã–≤–∞–µ–º –∏ —Ä–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
    deck = shuffle_deck(create_deck("36"))  # –°–æ–∑–¥–∞–µ–º –∏ –ø–µ—Ä–µ—Ç–∞—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–¥—É –∏–∑ 36 –∫–∞—Ä—Ç
    game['deck'] = deck
    game['players'], deck = deal_cards(game['players'], deck)  # –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞–º

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–∑—ã—Ä—è
    game['trump_suit'] = determine_trump(deck)  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–∑—ã—Ä—å

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–∑—ã—Ä–µ–º –∏ –ø–æ—Ä—è–¥–∫–∞ —Ö–æ–¥–∞
    players_order = determine_first_player(game['players'], game['trump_suit'])  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–æ–≤
    random.shuffle(players_order[1:])  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏–≥—Ä–æ–∫–æ–≤
    players_order[0]['status'] = 'Attacking'  # –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
    players_order[1]['status'] = 'Defending'  # –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –∑–∞—â–∏—â–∞–µ—Ç—Å—è
    for player in players_order[2:]:


        player['status'] = 'Idle'  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –æ–∂–∏–¥–∞—é—Ç —Å–≤–æ–µ–≥–æ —Ö–æ–¥–∞
    game['players'] = players_order  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ game

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞–º –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ —Ö–æ–¥–∞
    await send_cards_to_players(chat_id, context)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞–º
    group_message_id = await update_game_table_message(chat_id, context)
    game['group_message_id'] = group_message_id
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª —É –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    chat_id = update.message.chat_id

    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏: –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª–∏
    for player in game['players']:
        print(player)

    game['current_turn'] = game['players'][0]['id']  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ö–æ–¥ –Ω–∞ –∞—Ç–∞–∫—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    game['game_status'] = 'started'  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –Ω–∞ "started"
    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏: –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã –≤ –∫–æ–Ω—Å–æ–ª–∏
    # print("Game data:", game)

    


#–ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
def start_round(players_order, deck):
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç, –µ—Å–ª–∏ –Ω–∞ —Ä—É–∫–µ –º–µ–Ω—å—à–µ 6
    for player in players_order:
        while len(player['hand']) < 6 and deck:
            player['hand'].append(deck.pop())
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
    players_order[0]['status'] = 'Attacking'
    players_order[1]['status'] = 'Defending'
    for player in players_order[2:]:
        player['status'] = 'Idle'

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –∫–æ–Ω–µ—Ü —Ä–∞—É–Ω–¥–∞
def end_round(players_order, successful_defense):
    if successful_defense:
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∞—Ç–∞–∫—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
        players_order.append(players_order.pop(0))
    else:
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞—â–∏—â–∞—é—â–µ–≥–æ—Å—è –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
        players_order.append(players_order.pop(1))
    # ... (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤, –∏ —Ç.–¥.)



# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –∏–≥—Ä—ã
async def stop(update: Update, context: CallbackContext) -> None:
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ game_data
    game_data = games_data.get(group_chat_id)
    group_chat_id = game_data['chat_id']
    players = game_data['players']

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
    await context.bot.send_message(chat_id=group_chat_id, text="–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    for player in players:
        if 'message_id' in player:
            await context.bot.edit_message_reply_markup(chat_id=player['id'], message_id=player['message_id'], reply_markup=None)

    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏ –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    players.clear()
    game_data.clear()


async def callback_query_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    query_data = query.data
    user_chat_id = query.message.chat_id  # ID —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    #–ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    group_chat_id = context.user_data.get('group_chat_id', None)
    game_data = games_data.get(group_chat_id)
    table_cards = game_data['table_cards']
    trump_suit = game_data['trump_suit']

    # –í—ã–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç
    if query.data.startswith('card_'):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        current_keyboard = query.message.reply_markup.inline_keyboard

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∏–∑–º–µ–Ω—è—è —Ç–µ–∫—Å—Ç –Ω—É–∂–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        new_keyboard = []
        selected_cards = []
        for row in current_keyboard:
            new_row = []
            for button in row:
                if button.callback_data == query.data:
                    new_text = toggle_card_selection(button.text)
                    new_button = InlineKeyboardButton(new_text, callback_data=button.callback_data)
                else:
                    new_button = button
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —ç–º–æ–¥–∑–∏ "‚úÖ"
                if "‚úÖ" in new_button.text:
                    card_data = new_button.callback_data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–∑ callback_data
                    selected_cards.append(card_data)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
                    print(selected_cards)

                new_row.append(new_button)
            new_keyboard.append(new_row)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        reply_markup = InlineKeyboardMarkup(new_keyboard)
        await query.edit_message_reply_markup(reply_markup=reply_markup)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –≤ context.user_data
        context.user_data['selected_cards'] = selected_cards

    # –ö–Ω–æ–ø–∫–∞ "–ê—Ç–∞–∫–æ–≤–∞—Ç—å"
    elif query_data == "action_attack":
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–∑ context.user_data
        selected_cards = context.user_data.get('selected_cards', [])
    
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
        selected_cards = [{'suit': card_str.split('-')[0], 'rank': card_str.split('-')[1]} for card_str in selected_cards]
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ—é—Ç –ª–∏ –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–∞–Ω–≥
        if not check_cards_same_value(selected_cards):
            await query.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—ã –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.", show_alert=True)
            return

        # –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await query.answer(text="–ú–æ–∂–Ω–æ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏", show_alert=True)

        group_chat_id = context.user_data.get('group_chat_id', None)
        game_data = games_data.get(group_chat_id)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ game_data
        players = game_data['players']
        deck = game_data['deck']
        table_cards = game_data['table_cards']

        # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ –ø–æ –µ–≥–æ ID
        player = next((p for p in players if p['id'] == query.from_user.id), None)

        # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω, –ø–æ–ª—É—á–∞–µ–º trump_suit –∏–∑ –µ–≥–æ —Å–ª–æ–≤–∞—Ä—è
        if player:
            trump_suit = player.get('trump_suit', None)
        else:
            trump_suit = None  # –∏–ª–∏ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        user_chat_id = query.message.chat_id
  
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞—Ç–∞–∫–∏
        await handle_attack(update, context, user_chat_id, game_data)

    # –ö–Ω–æ–ø–∫–∞ "–ü–æ–±–∏—Ç—å—Å—è"
    elif query_data == "action_defend":
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–∑ context.user_data
        selected_cards = context.user_data.get('selected_cards', [])
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
        selected_cards = [{'suit': card_str.split('-')[0], 'rank': card_str.split('-')[1]} for card_str in selected_cards]
        
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –ø—É—Å—Ç, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        if not selected_cards:
            await query.answer(text="–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–±–∏—Ç—å—Å—è.", show_alert=True)
            return
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–æ–±–∏—Ç—å –∫–∞—Ä—Ç—É –Ω–∞ —Å—Ç–æ–ª–µ
        if not can_defend(selected_cards, table_cards, trump_suit):
            await query.answer(text="–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–±–∏—Ç—å –∫–∞—Ä—Ç—É –Ω–∞ —Å—Ç–æ–ª–µ.", show_alert=True)
            return

        # –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await query.answer(text="–£—Å–ø–µ—à–Ω–∞—è –∑–∞—â–∏—Ç–∞!", show_alert=True)

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞—â–∏—Ç—ã
        await handle_defend(update, context, user_chat_id, game_data)
    
    # –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–∫–∏–Ω—É—Ç—å"
    elif query_data == "action_throw_in":
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–∑ context.user_data
        selected_cards = context.user_data.get('selected_cards', [])
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
        selected_cards = [{'suit': card_str.split('-')[0], 'rank': card_str.split('-')[1]} for card_str in selected_cards]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–≥–∏ –∫–∞—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–∞ —Å—Ç–æ–ª–µ
        table_card_ranks = [card['card']['rank'] for card in table_cards]
        
         # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –ø—É—Å—Ç, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        if not selected_cards:
            await query.answer(text="–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–¥–∫–∏–Ω—É—Ç—å.")
            return       

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É –∏–∑ —Ä–∞–Ω–≥–æ–≤ –∫–∞—Ä—Ç –Ω–∞ —Å—Ç–æ–ª–µ
        if not any(card['rank'] in table_card_ranks for card in selected_cards):
            await query.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ä–∞–Ω–≥—É –∫–∞—Ä—Ç –Ω–∞ —Å—Ç–æ–ª–µ.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∑–∞—â–∏—â–∞—é—â–µ–≥–æ—Å—è –∏–≥—Ä–æ–∫–∞ –µ—â–µ –µ—Å—Ç—å –∫–∞—Ä—Ç—ã –≤ —Ä—É–∫–∞—Ö
        defending_player = next((p for p in game_data['players'] if p['status'] == 'Defending'), None)
        if not defending_player or not defending_player['hand']:
            await query.answer(text="–ó–∞—â–∏—â–∞—é—â–∏–π—Å—è –∏–≥—Ä–æ–∫ –Ω–µ –∏–º–µ–µ—Ç –∫–∞—Ä—Ç –≤ —Ä—É–∫–∞—Ö.")
            return

        # –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await query.answer(text="–ú–æ–∂–Ω–æ –ø–æ–¥–∫–∏–Ω—É—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É")

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥–∫–∏–¥—ã–≤–∞–Ω–∏—è
        await handle_throw_in(update, context, user_chat_id, game_data)

    # –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–≤–æ–¥"
    elif query_data == "action_transfer":
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–∑ context.user_data
        selected_cards = context.user_data.get('selected_cards', [])
        print(selected_cards)

        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –ø—É—Å—Ç, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        if not selected_cards:
            await query.answer(text="–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.", show_alert=True)
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
        selected_cards_dicts = [{'suit': card_str.split('-')[0], 'rank': card_str.split('-')[1]} for card_str in selected_cards]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ—é—Ç –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —Ç–∞–∫–æ–µ –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–∞–∫ –∏ –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ
        table_card_values = [card['card']['rank'] for card in table_cards]
        for card in selected_cards_dicts:
            if card['rank'] not in table_card_values:
                await query.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—ã —Ç–∞–∫–æ–≥–æ –∂–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∫–∞–∫ –∏ –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ.")
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ —Å—á–µ—Ç—É –∏–≥—Ä–æ–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç
        players_order = game_data['players']
        current_player_id = query.from_user.id
        current_player_index = next(i for i, p in enumerate(players_order) if p['id'] == current_player_id)
        next_player = players_order[(current_player_index + 1) % len(players_order)]
        if len(next_player['hand']) < len(table_cards) + len(selected_cards_dicts):
            await query.answer(text="–£ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
            return

        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
        await query.answer(text="–ú–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏")

        await handle_transfer(update, context, user_chat_id, game_data)


    elif query_data == "action_take":
        print("–Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –í–∑—è—Ç—å")
        
        await handle_take(update, context, user_chat_id, game_data)

    elif query_data == "action_done":
        print("–Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ë–∏—Ç–æ")
        
        await handle_done(update, context, user_chat_id, game_data)




    



# –§—É–Ω–∫—Ü–∏—è "–ê—Ç–∞–∫–æ–≤–∞—Ç—å"
async def handle_attack(update: Update, context: CallbackContext, user_chat_id, game_data):
    # print("Debug: Inside handle_attack")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ game_data
    group_chat_id = game_data['chat_id']
    players = game_data['players']
    table_cards = game_data['table_cards']
    deck = game_data['deck']
    trump_suit = game_data['trump_suit']

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–∑ context.user_data
    selected_cards = context.user_data.get('selected_cards', [])
    selected_cards = [{'type': 'attack', 'card': {'suit': card_str.split('-')[0], 'rank': card_str.split('-')[1]}} for card_str in selected_cards]

    # –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ —Å –Ω—É–∂–Ω—ã–º chat_id
    player = next((p for p in players if p['id'] == update.callback_query.from_user.id), None)

    if player:
        player['hand'] = [card for card in player['hand'] if card not in [c['card'] for c in selected_cards]]
        player['status'] = 'idle'

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª —Å —É—á–µ—Ç–æ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        if table_cards:
            current_index = max([card.get('index', 0) for card in table_cards]) + 1
        else:
            current_index = 1
        for card in selected_cards:
            card['index'] = current_index
            current_index += 1
            table_cards.append(card)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –Ω–∞ —Å—Ç–æ–ª–µ –≤ context.user_data
        context.user_data['table_cards'] = table_cards

        await check_player_status(update, context, user_chat_id, game_data)
        table_message = generate_game_table(game_data)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
        await context.bot.edit_message_text(chat_id=group_chat_id, message_id=game_data['group_message_id'], text=table_message)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        for p in players:
            # print(f"Player {p['name']} has status: {p['status']}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ä—Ç–∞–º–∏ –∏–≥—Ä–æ–∫–∞
            cards_menu = generate_cards_menu(p['hand'])
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –∏–≥—Ä–æ–∫–∞
            actions_menu = generate_actions_menu(p['status'], table_cards)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –µ–≥–æ —Å –º–µ–Ω—é –∫–∞—Ä—Ç, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ–Ω—é –∫–∞—Ä—Ç
            if actions_menu:
                combined_menu = cards_menu.inline_keyboard + actions_menu.inline_keyboard
            else:
                combined_menu = cards_menu.inline_keyboard
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å—Ç–æ–ª–∞
            table_message = generate_game_table(game_data)
            
            # –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å 'message_id'
            if 'message_id' in p:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
                await context.bot.edit_message_text(chat_id=p['id'], message_id=p['message_id'], text=table_message, reply_markup=InlineKeyboardMarkup(combined_menu))
    context.user_data['selected_cards'] = []


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–ª—è –∞—Ç–∞–∫–∏ –∏–º–µ—é—Ç –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
def check_cards_same_value(selected_cards):
    if not selected_cards:
        return False  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
    
    first_card_rank = selected_cards[0]['rank']  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–≥ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç—ã
    
    for card in selected_cards:
        if card['rank'] != first_card_rank:
            return False  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False, –µ—Å–ª–∏ —Ä–∞–Ω–≥ –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–∞—Ä—Ç—ã –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø–µ—Ä–≤–æ–π
    
    return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ä–∞–Ω–≥

# –§—É–Ω–∫—Ü–∏—è "–û—Ç–±–∏—Ç—å—Å—è"
async def handle_defend(update: Update, context: CallbackContext, user_chat_id, game_data):
    # print("Debug: Inside handle_defend")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ game_data
    group_chat_id = game_data['chat_id']
    players = game_data['players']
    table_cards = game_data['table_cards']
    deck = game_data['deck']
    trump_suit = game_data['trump_suit']

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–∑ context.user_data
    selected_cards = context.user_data.get('selected_cards', [])
    selected_cards = [{'type': 'defend', 'card': {'suit': card_str.split('-')[0], 'rank': card_str.split('-')[1]}} for card_str in selected_cards]

    # –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ —Å –Ω—É–∂–Ω—ã–º chat_id
    player = next((p for p in players if p['id'] == update.callback_query.from_user.id), None)

    if player:
        player['hand'] = [card for card in player['hand'] if card not in [c['card'] for c in selected_cards]]

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª —Å —É—á–µ—Ç–æ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        for card in selected_cards:
            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–æ—Ç–±–∏—Ç—É—é –∫–∞—Ä—Ç—É –∞—Ç–∞–∫–∏
            attack_card = next((c for c in table_cards if c['type'] == 'attack' and not any(d['type'] == 'defend' and d['index'] == c['index'] for d in table_cards)), None)
            if attack_card:
                card['index'] = attack_card['index']  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–∞—Ä—Ç–µ –∑–∞—â–∏—Ç—ã –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏
                table_cards.append(card)
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫–∏, —ç—Ç–æ –æ—à–∏–±–∫–∞
                print("Error: No matching attack card found for defense card.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –Ω–∞ —Å—Ç–æ–ª–µ –≤ context.user_data
        context.user_data['table_cards'] = table_cards

        await check_player_status(update, context, user_chat_id, game_data)
        table_message = generate_game_table(game_data)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
        await context.bot.edit_message_text(chat_id=group_chat_id, message_id=game_data['group_message_id'], text=table_message)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        for p in players:
            # print(f"Player {p['name']} has status: {p['status']}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ä—Ç–∞–º–∏ –∏–≥—Ä–æ–∫–∞
            cards_menu = generate_cards_menu(p['hand'])
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –∏–≥—Ä–æ–∫–∞
            actions_menu = generate_actions_menu(p['status'], table_cards)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –µ–≥–æ —Å –º–µ–Ω—é –∫–∞—Ä—Ç, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ–Ω—é –∫–∞—Ä—Ç
            if actions_menu:
                combined_menu = cards_menu.inline_keyboard + actions_menu.inline_keyboard
            else:
                combined_menu = cards_menu.inline_keyboard
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å—Ç–æ–ª–∞
            table_message = generate_game_table(game_data)
            
            # –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å 'message_id'
            if 'message_id' in p:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
                await context.bot.edit_message_text(chat_id=p['id'], message_id=p['message_id'], text=table_message, reply_markup=InlineKeyboardMarkup(combined_menu))
    context.user_data['selected_cards'] = []

# –§—É–Ω–∫—Ü–∏—è "–ü–æ–¥–∫–∏–Ω—É—Ç—å"
async def handle_throw_in(update: Update, context: CallbackContext, user_chat_id, game_data):
    # print("Debug: Inside handle_throw_in")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ game_data
    group_chat_id = game_data['chat_id']
    players = game_data['players']
    table_cards = game_data['table_cards']
    deck = game_data['deck']
    trump_suit = game_data['trump_suit']

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–∑ context.user_data
    selected_cards = context.user_data.get('selected_cards', [])
    selected_cards = [{'type': 'attack', 'card': {'suit': card_str.split('-')[0], 'rank': card_str.split('-')[1]}} for card_str in selected_cards]

    # –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ —Å –Ω—É–∂–Ω—ã–º chat_id
    player = next((p for p in players if p['id'] == update.callback_query.from_user.id), None)

    if player:
        # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–∑ —Ä—É–∫–∏ –∏–≥—Ä–æ–∫–∞
        player['hand'] = [card for card in player['hand'] if card not in [c['card'] for c in selected_cards]]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –∫–∞—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–∫–∏–¥—ã–≤–∞—é—Ç—Å—è
        if table_cards:
            current_max_index = max([card.get('index', 0) for card in table_cards if card['type'] == 'attack'])
            for card in selected_cards:
                current_max_index += 1
                card['index'] = current_max_index
                table_cards.append(card)
        else:
            for card in selected_cards:
                card['index'] = 1
                table_cards.append(card)


        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –Ω–∞ —Å—Ç–æ–ª–µ –≤ context.user_data
        context.user_data['table_cards'] = table_cards

        await check_player_status(update, context, user_chat_id, game_data)
        table_message = generate_game_table(game_data)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
        await context.bot.edit_message_text(chat_id=group_chat_id, message_id=game_data['group_message_id'], text=table_message)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        for p in players:
            # print(f"Player {p['name']} has status: {p['status']}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ä—Ç–∞–º–∏ –∏–≥—Ä–æ–∫–∞
            cards_menu = generate_cards_menu(p['hand'])
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –∏–≥—Ä–æ–∫–∞
            actions_menu = generate_actions_menu(p['status'], game_data['table_cards'])
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –µ–≥–æ —Å –º–µ–Ω—é –∫–∞—Ä—Ç, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ–Ω—é –∫–∞—Ä—Ç
            if actions_menu:
                combined_menu = cards_menu.inline_keyboard + actions_menu.inline_keyboard
            else:
                combined_menu = cards_menu.inline_keyboard
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å—Ç–æ–ª–∞
            table_message = generate_game_table(game_data)
            
            # –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å 'message_id'
            if 'message_id' in p:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
                await context.bot.edit_message_text(chat_id=p['id'], message_id=p['message_id'], text=table_message, reply_markup=InlineKeyboardMarkup(combined_menu))
    context.user_data['selected_cards'] = []

# –§—É–Ω–∫—Ü–∏—è "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏"
async def handle_transfer(update: Update, context: CallbackContext, user_chat_id, game_data):
    # print("Debug: Inside handle_transfer")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ game_data
    group_chat_id = game_data['chat_id']
    players_order = game_data['players']
    table_cards = game_data['table_cards']

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–∑ context.user_data
    selected_cards = context.user_data.get('selected_cards', [])
    selected_cards_dicts = [{'type': 'attack', 'card': {'suit': card_str.split('-')[0], 'rank': card_str.split('-')[1]}} for card_str in selected_cards]

    # –ò—â–µ–º –∏–≥—Ä–æ–∫–∞ —Å –Ω—É–∂–Ω—ã–º chat_id
    player = next((p for p in players_order if p['id'] == update.callback_query.from_user.id), None)

    if player:
        # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–∑ —Ä—É–∫–∏ –∏–≥—Ä–æ–∫–∞
        player['hand'] = [card for card in player['hand'] if card not in [c['card'] for c in selected_cards_dicts]]
        player['status'] = 'idle'

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª —Å —É—á–µ—Ç–æ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        if table_cards:
            current_index = max([card.get('index', 0) for card in table_cards]) + 1
        else:
            current_index = 1
        for card in selected_cards_dicts:
            card['index'] = current_index
            current_index += 1
            table_cards.append(card)

        # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        players_order.append(players_order.pop(0))
        players_order[1]['status'] = 'Defending'  # –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ —Ç–µ–ø–µ—Ä—å –∑–∞—â–∏—â–∞–µ—Ç—Å—è

        await check_player_status(update, context, user_chat_id, game_data)
        table_message = generate_game_table(game_data)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
        await context.bot.edit_message_text(chat_id=group_chat_id, message_id=game_data['group_message_id'], text=table_message)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        for p in players_order:
            # print(f"Player {p['name']} has status: {p['status']}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ä—Ç–∞–º–∏ –∏–≥—Ä–æ–∫–∞
            cards_menu = generate_cards_menu(p['hand'])
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –∏–≥—Ä–æ–∫–∞
            actions_menu = generate_actions_menu(p['status'], game_data['table_cards'])
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –µ–≥–æ —Å –º–µ–Ω—é –∫–∞—Ä—Ç, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ–Ω—é –∫–∞—Ä—Ç
            if actions_menu:
                combined_menu = cards_menu.inline_keyboard + actions_menu.inline_keyboard
            else:
                combined_menu = cards_menu.inline_keyboard
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å—Ç–æ–ª–∞
            table_message = generate_game_table(game_data)
            
            # –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å 'message_id'
            if 'message_id' in p:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
                await context.bot.edit_message_text(chat_id=p['id'], message_id=p['message_id'], text=table_message, reply_markup=InlineKeyboardMarkup(combined_menu))
    context.user_data['selected_cards'] = []


# –§—É–Ω–∫—Ü–∏—è "–í–∑—è—Ç—å"
async def handle_take(update: Update, context: CallbackContext, user_chat_id, game_data):
    # print("Debug: Inside handle_take")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ game_data
    group_chat_id = game_data['chat_id']
    players_order = game_data['players']
    table_cards = game_data['table_cards']
    deck = game_data['deck']
    print(f"–î–æ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç {game_data['table_cards']}")
    # 1. –ó–∞—â–∏—â–∞—é—â–∏–π—Å—è –∏–≥—Ä–æ–∫ –∑–∞–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∫–∞—Ä—Ç—ã —Å–æ —Å—Ç–æ–ª–∞
    defending_player = next((p for p in players_order if p['status'] == 'Defending'), None)
    if defending_player:
        defending_player['hand'].extend([card['card'] for card in table_cards])
        game_data['table_cards'] = []

    # 2. –í—Å–µ –∏–≥—Ä–æ–∫–∏ –¥–æ–±–∏—Ä–∞—é—Ç –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã –¥–æ 6
    for player in players_order:
        while len(player['hand']) < 6 and deck:
            player['hand'].append(deck.pop())

    # 3. –ú–µ–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–æ–≤
    print(f"–ü–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–∞ –¥–æ –≤–∑—è—Ç–∏—è {players_order}")
    players_order.append(players_order.pop(0))
    players_order.append(players_order.pop(0))
    print(f"–ø–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–∞ –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è  {players_order}")
    players_order[0]['status'] = 'Attacking'
    if len(players_order) > 2:
        players_order[1]['status'] = 'Defending'
        for player in players_order[2:]:
            player['status'] = 'Idle'
    else:
        players_order[1]['status'] = 'Defending'

    await check_player_status(update, context, user_chat_id, game_data)

    print(f"–ü–æ—Å–ª–µ –≤–∑—è—Ç–∏—è –∫–∞—Ä—Ç {game_data['table_cards']}")
    table_message = generate_game_table(game_data)
    
    # 4. –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª –∏ –º–µ–Ω—é –∫–∞—Ä—Ç
    await context.bot.edit_message_text(chat_id=group_chat_id, message_id=game_data['group_message_id'], text=table_message)

    for p in players_order:
        # print(f"Player {p['name']} has status: {p['status']}")
        
        cards_menu = generate_cards_menu(p['hand'])
        actions_menu = generate_actions_menu(p['status'], game_data['table_cards'])
        
        if actions_menu:
            combined_menu = cards_menu.inline_keyboard + actions_menu.inline_keyboard
        else:
            combined_menu = cards_menu.inline_keyboard
        
        table_message = generate_game_table(game_data)
        
        if 'message_id' in p:
            await context.bot.edit_message_text(chat_id=p['id'], message_id=p['message_id'], text=table_message, reply_markup=InlineKeyboardMarkup(combined_menu))
    context.user_data['selected_cards'] = []



# –§—É–Ω–∫—Ü–∏—è "–ë–∏—Ç–æ"
async def handle_done(update: Update, context: CallbackContext, user_chat_id, game_data):

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ game_data
    group_chat_id = game_data['chat_id']
    players_order = game_data['players']
    table_cards = game_data['table_cards']


    # print(game_data)
    # 1. –û—á–∏—â–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª
    game_data['table_cards'] = []

    # 2. –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞–º –∏–∑ –∫–æ–ª–æ–¥—ã
    players = game_data['players']
    deck = game_data['deck']

    # –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –∞—Ç–∞–∫—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
    while len(players[0]['hand']) < 6 and deck:
        players[0]['hand'].append(deck.pop())

    # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –±–æ–ª—å—à–µ –¥–≤—É—Ö, —Ä–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –æ—Å—Ç–∞–ª—å–Ω—ã–º, –∫—Ä–æ–º–µ –∑–∞—â–∏—â–∞—é—â–µ–≥–æ—Å—è
    if len(players) > 2:
        for player in players[2:]:
            while len(player['hand']) < 6 and deck:
                player['hand'].append(deck.pop())

    # –†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –∑–∞—â–∏—â–∞—é—â–µ–º—É—Å—è –∏–≥—Ä–æ–∫—É
    while len(players[1]['hand']) < 6 and deck:
        players[1]['hand'].append(deck.pop())

    # 3. –ú–µ–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–æ–≤
    # –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º
    players.append(players.pop(0))

    # –ó–∞—â–∏—â–∞—é—â–∏–π—Å—è –∏–≥—Ä–æ–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞—Ç–∞–∫—É—é—â–∏–º
    players[0]['status'] = 'Attacking'
    # –°–ª–µ–¥—É—é—â–∏–π –≤ —Å–ø–∏—Å–∫–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∑–∞—â–∏—â–∞—é—â–∏–º—Å—è
    players[1]['status'] = 'Defending'
    # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –±–æ–ª—å—à–µ –¥–≤—É—Ö, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—É—á–∞—é—Ç —Å—Ç–∞—Ç—É—Å 'Idle'
    for player in players[2:]:
        player['status'] = 'Idle'

    await check_player_status(update, context, user_chat_id, game_data)
    table_message = generate_game_table(game_data)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–π —Å—Ç–æ–ª –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
    await context.bot.edit_message_text(chat_id=group_chat_id, message_id=game_data['group_message_id'], text=table_message)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    for p in players_order:
        # print(f"Player {p['name']} has status: {p['status']}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ä—Ç–∞–º–∏ –∏–≥—Ä–æ–∫–∞
        cards_menu = generate_cards_menu(p['hand'])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –∏–≥—Ä–æ–∫–∞
        actions_menu = generate_actions_menu(p['status'], game_data['table_cards'])
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –µ–≥–æ —Å –º–µ–Ω—é –∫–∞—Ä—Ç, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ–Ω—é –∫–∞—Ä—Ç
        if actions_menu:
            combined_menu = cards_menu.inline_keyboard + actions_menu.inline_keyboard
        else:
            combined_menu = cards_menu.inline_keyboard
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ —Å—Ç–æ–ª–∞
        table_message = generate_game_table(game_data)
        
        # –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å 'message_id'
        if 'message_id' in p:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            await context.bot.edit_message_text(chat_id=p['id'], message_id=p['message_id'], text=table_message, reply_markup=InlineKeyboardMarkup(combined_menu))    





#–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–±–∏—Ç—å—Å—è
def can_defend(defending_cards, table_cards, trump_suit):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–≥—É—Ç –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø–æ–±–∏—Ç—å –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ.
    """
    
    # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–º–∏ –∞—Ç–∞–∫—É—é—Ç –∏ –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –æ—Ç–±–∏—Ç—ã
    attacking_cards = [card['card'] for card in table_cards if card['type'] == 'attack' and not any(d['type'] == 'defend' and d['index'] == card['index'] for d in table_cards)]
    
    # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –¥–ª—è –∑–∞—â–∏—Ç—ã –±–æ–ª—å—à–µ, —á–µ–º –Ω–µ–ø–æ–±–∏—Ç—ã—Ö –∫–∞—Ä—Ç –∞—Ç–∞–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
    if len(defending_cards) > len(attacking_cards):
        return False
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–µ, –∫–æ—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–±–∏—Ç—å—Å—è
    for i, defend_card in enumerate(defending_cards):
        attack_card = attacking_cards[i]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ defend_card –ø–æ–±–∏—Ç—å attack_card, –µ—Å–ª–∏ –æ–Ω–∏ –æ–¥–Ω–æ–π –º–∞—Å—Ç–∏ –∏ —Ä–∞–Ω–≥ defend_card –≤—ã—à–µ
        if attack_card['suit'] == defend_card['suit'] and rank_hierarchy[defend_card['rank']] > rank_hierarchy[attack_card['rank']]:
            continue
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ defend_card –ø–æ–±–∏—Ç—å attack_card, –µ—Å–ª–∏ defend_card - –∫–æ–∑—ã—Ä—å, –∞ attack_card - –Ω–µ—Ç
        elif defend_card['suit'] == trump_suit and attack_card['suit'] != trump_suit:
            continue
        else:
            print(f"Card {defend_card} cannot beat {attack_card}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            return False

    print("–≠—Ç–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏ –º–æ–∂–Ω–æ –ø–æ–±–∏—Ç—å—Å—è")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    return True

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã—à–µ–ª –ª–∏ –∏–≥—Ä–æ–∫ –∏–∑ –∏–≥—Ä—ã –ø—Ä–∏ —Å–≤–æ–µ–º –¥–µ–π—Å—Ç–≤–∏–∏                   
async def check_player_status(update: Update, context: CallbackContext, user_chat_id, game_data):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ game_data
    group_chat_id = game_data['chat_id']
    players = game_data['players']
    deck = game_data['deck']

    players_to_remove = []
    for player in players:
        if not deck and not player['hand']:
            players_to_remove.append(player)
            exit_message = f"{player['name']} –≤—ã—à–µ–ª"
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
            await context.bot.send_message(chat_id=group_chat_id, text=exit_message)

    # –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏ –µ–≥–æ –∫–Ω–æ–ø–∫–∏
    for player in players_to_remove:
        players.remove(player)
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã
        await context.bot.edit_message_reply_markup(chat_id=player['id'], message_id=player['message_id'], reply_markup=None)
    
    # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω –∏–≥—Ä–æ–∫
    if len(players) == 1:
        loser_message = f"{players[0]['name']} –¥—É—Ä–∞–∫!"
        await context.bot.send_message(chat_id=group_chat_id, text=loser_message)
        
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        await context.bot.edit_message_reply_markup(chat_id=players[0]['id'], message_id=players[0]['message_id'], reply_markup=None)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        game_data['game_status'] = 'ended'














# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

def main() -> None:
    application = Application.builder().token('6189771635:AAHEZ83SLCJ8VqBwF6aF3OtLcAHU7jcmwUc').build()

   
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('play', play))
    application.add_handler(CommandHandler('rules', rules))
    application.add_handler(CommandHandler('go', go))
    application.add_handler(CommandHandler('stop', stop))
    application.add_handler(CommandHandler('list', list_participants))   
    application.add_handler(CallbackQueryHandler(callback_query_handler))
    



    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    
    main()
